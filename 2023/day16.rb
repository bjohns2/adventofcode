test_input = '.|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\\\..
.-.-/..|..
.|....-|.\
..//.|....'

my_input = '\\.............\\................\\....\\..../....\\/...............................\\...-..........-.\\.-....../....
|\\......../|....\\..............-\\............./...........................-..........-......\\........\\........
.......||......../....-./.../-...|.|..-......-.|....../................\\............|...................-..|..
........./......-.............-\\......................|.\\./.......|........./......-......../..-.........|....
....../....................-............................................../...../...|.........................
....................\\....|/............................./.......-....|......../..........................\\....
.|....../|.........-......|.............\\..|..................|......../.................|.|............-.|...
.....-............\\\\............\\................/......-.........\\................\\..|../....................
............|..|.......|......../................\\.......................|../....../......./.....|............
.\\...........\\..\\.............../.........-/....|......................./.....-./-.........../-........-......
|................\\.\\-.............../..-............./........./.................\\.............|...-.....-....
.........-....|..|......................................\\.||...-../..|............../...../.../.........-.....
.....-....-\\.................|...........|../.....\\...............................|...../../|.................
.\\......\\......................\\....../.../.....-.../.........................../..|...........|..\\...........
-............|.........-.-........-.........................|...\\...-...........\\.|...-....../..........|.....
.........-.......|......\\.....\\..-...../..../.....\\.../............/..........-......./....../...........\\.../
..............\\........................|.............................-../......-..-...../..................\\..
.....\\......-.......-.......-......../../../........\\.......-..........|......./........................../...
.\\...\\...................|./\\|.-..\\...............................\\..\\.....-....|......................./.....
.................-...|....|.../...../.|.||.....-.|............................-..............\\................
........................................../.......................|........\\......../.../..............|.....\\
.......\\......./............................./........../../..........................-\\..................|...
...........-...|..\\..........-.........\\.................././................|./.......|............../.......
......./..................................\\...-.........\\........\\....../............................\\......\\-
-.|..-|...............|..........................\\..........|.-.........\\............-.|.............\\.....|..
.............................../..............-.....-.......-........................|.......-................
.........\\.........-.........|...../......../......./....-...\\...................\\........\\...................
..........\\.........\\........../...|.................|./...\\.......\\..........-...............................
./...................|........../\\......../....................|..-...........\\...\\...........|..............|
.....|...........\\-.\\.......-..........................-....-...................|....|.|...............-......
.|.././......................|.......|.......|..............\\...../.................../.\\...-.................
...........-........./....|.................|..-.....-............./...................................-..../.
...................\\/..|.....-............../-......-..........|........................./...\\....-|....|-....
........................./..-..|.\\-...............-......-/...../.......\\..|................-...\\.|.....\\.....
\\...../.........................../....................-..........|........../..-..-.......\\........../.././|.
........................../...\\|..................................................../...|.-........-.....|..\\.
....\\.............................|./.....|...../....\\.............\\...../.......-...............\\..-..../....
.........-.........................|................|........\\/.\\-...................\\..-......./../..........
...-.../............/.................-..........\\....../............../...../..........|.....................
..........\\...\\..................|...-......\\\\......./...-.............-\\.................|...../......\\......
/..\\/.............\\....\\.............\\.......................................|.....\\....-............\\........
....../..\\.|................................\\.........../.......-.......-/.....|...................-.....-....
........-....|.............................|....../...............\\.......................--..................
................/......|.........-....................-..............|.......................................|
.........\\........|...........................\\.............|.............................../.................
...|..\\....-......../.\\...-............................................................/....-...../...........
.............\\\\\\.../...../.../..........\\..............\\...........\\........................|....../.........\\
......-..............|..-..|....-\\..\\..-...-............\\.................\\...-.\\/.....\\......-.\\....--.../...
........./...................../...../..|...\\.\\/.........\\.../........................................\\.../-..
........\\.......|.......|\\..|........../..../\\........../........\\..../..............././..../.............-.\\
........................|-............|............................./.-.|...|............../....-\\............
../........-.../....................|....................-/.............../.....-...........-....\\......||....
.....\\..|.....-|../....|./....-|.......-...../..-..\\..............\\...................../.................|...
...-......../.\\...........\\.........\\../.....|............\\..................../.........\\................/.\\/
...../...|............-..\\.../............/............-..............--.-..........././............-........|
.....|...........\\.....-...\\..../.....-........-.....\\.|..............\\....-............./...../..............
....\\.....-.|....\\..../..............\\|../.........../......|....\\/.......................|............|....-.
........|..--..............|..............-........|.......|.-.........\\.............-...........\\............
./.||....\\......./....\\./........../...........././....\\.................../..................\\...../.........
.......|..\\...-.\\..\\..|.........../..................................-....|........\\......|....|..............
...|..........|.........-...............|...............................-.......|...........-..\\.......\\......
.\\.........../../............................-..|...\\.....-.........../......-|.../.....|.................-...
........|....../..\\..\\|..|......|.........|...............................\\../.....\\....-/........-...........
.................................................\\.......|........|.\\.-....../.......|.......|............\\...
.......|.......\\.......|.........|......-......|...|...\\.............\\.............|/.........................
..........|....................|..........\\..........-......./................................................
...../.......|....................|......................././.................................................
........\\.............|........--..........\\.............../......|...................../............|..\\.....
....-............|.........|....|.-.\\../-...\\....-...-................\\|..\\-.......|........-............../..
................/........\\.....\\.....././....|....................-...............\\...........-......\\........
.\\.....|......|...|\\......\\.\\/....\\.............-............\\.....\\.......-...-........-....//..../.....|..-.
..................|..|.-.................../\\...........|..../..........\\|.....-..|.../.......................
-......-......./........./../.............../..................-..\\.......\\............|...../../....../......
....../............/...........\\.............\\............./.........../.......\\......|....|.........../......
...\\........|..................|............-............-.....-..\\..-................/........../........||..
......../..|..-../..../......................../.........\\./.-................../...................-.........
.../....|....\\.......-..\\..........-....\\.............|\\........../...............-........|..................
..............\\.............\\|.........-......................-........\\|......./.......-.................|...
/..../...-||\\-...|\\...............................\\.......................\\.............-................-....
.......-..-....|..................|..............................................................///...-.../.|
......|.......-/........-.-......|....\\..-...|...........\\...........\\.....................-..../.........../.
......-...........|-..\\.......|...|.\\|.................-....\\...................\\.\\........\\.\\./.........\\....
....../............../.........|...|.......|..../.............................................................
.........../...................-./...\\..........\\-............./...........\\.../.....|......................-.
/..../..../........................................|.\\......-/......./....\\.........................-......|..
.\\./.|.-..........................|...|...........|....../....-....../|...............\\..............\\...-....
....|...\\..........|......-..................|........../..|.-...\\........./........|................|........
...\\....\\........../........../.........\\..............-...........................-.|...../..........\\.......
...|...........-...........................\\........-.........................\\...-..-.....\\.......|........-.
......\\|...........................\\.....................................-............/....\\...........|......
................../............-........................\\.................................................-...
.../....|...............|....................../\\.........|....................\\....|............\\.........|-.
.......................................|....-.........../....\\-........|......./............-..|.............\\
/.........\\..\\.........|...............\\.......\\........./................\\....................|.....|........
..................................|.....|.-..|.../......................../-\\......|..........................
.................|.....................................................-............|.....|..../.\\/..........|
.......\\....\\....-........|.|..../......-......\\...../....................-...........\\............-..........
....-.................................-..........-......-................................../.........-\\...|...
.....................|......................|.........-............../.../.....-........\\.....................
.\\./..........-.\\...\\||................./../........\\.........|...\\........\\....\\.\\...............-|......|...
..\\......//.........../.\\........\\......|......|........\\......\\.....-..........|.-..|...../|.................
/.....................\\.................-........|...................\\.....-..............-/.....\\..|../../...
...|..-.../............./.|.................../............/..\\...........-....|-............\\.......--.......
..............\\..\\/.....\\.........|.\\.........................|............|........./................./-..|-.
...........................-.................../...................|\\..........\\/..|.-........................
.....-.............................../....................\\.........|......................|..................
..................\\.........../...........\\..\\/.........|...........|..-........|....\\..........-...../.|.....
..........|.......\\..\\...........\\.../......................-...........-.....-........../\\|..................
....../.......-........................\\|...//...\\..-......\\.......|..\\....................-..........\\..-....
|./....|........-./........../.\\...\\.....|../..../.......-........../.\\.....-.................................
'

def parse_input(input)
  input.split("\n").map{|l| l.split('')}
end

def step_beam(map, energized_map, location, direction)
  if direction == 'right'
    new_location = [location[0], location[1] + 1]
    return if location[1] + 1 >= map[0].size
    return if energized_map[new_location[0]][new_location[1]].include? 'R'
    energized_map[new_location[0]][new_location[1]] << 'R'
    if map[new_location[0]][new_location[1]] == '.'
      step_beam(map, energized_map, new_location, 'right')
    elsif map[new_location[0]][new_location[1]] == '|'
      step_beam(map, energized_map, new_location, 'up')
      step_beam(map, energized_map, new_location, 'down')
    elsif map[new_location[0]][new_location[1]] == '-'
      step_beam(map, energized_map, new_location, 'right')
    elsif map[new_location[0]][new_location[1]] == '/'
      step_beam(map, energized_map, new_location, 'up')
    elsif map[new_location[0]][new_location[1]] == "\\"
      step_beam(map, energized_map, new_location, 'down')
    end
  elsif direction == 'left'
    new_location = [location[0], location[1] - 1]
    return if location[1] - 1 < 0
    return if energized_map[new_location[0]][new_location[1]].include? 'L'
    energized_map[new_location[0]][new_location[1]] << 'L'
    if map[new_location[0]][new_location[1]] == '.'
      step_beam(map, energized_map, new_location, 'left')
    elsif map[new_location[0]][new_location[1]] == '|'
      step_beam(map, energized_map, new_location, 'up')
      step_beam(map, energized_map, new_location, 'down')
    elsif map[new_location[0]][new_location[1]] == '-'
      step_beam(map, energized_map, new_location, 'left')
    elsif map[new_location[0]][new_location[1]] == '/'
      step_beam(map, energized_map, new_location, 'down')
    elsif map[new_location[0]][new_location[1]] == "\\"
      step_beam(map, energized_map, new_location, 'up')
    end
  elsif direction == 'up'
    new_location = [location[0] - 1, location[1]]
    return if location[0] - 1 < 0
    return if energized_map[new_location[0]][new_location[1]].include? 'U'
    energized_map[new_location[0]][new_location[1]] << 'U'
    if map[new_location[0]][new_location[1]] == '.'
      step_beam(map, energized_map, new_location, 'up')
    elsif map[new_location[0]][new_location[1]] == '|'
      step_beam(map, energized_map, new_location, 'up')
    elsif map[new_location[0]][new_location[1]] == '-'
      step_beam(map, energized_map, new_location, 'left')
      step_beam(map, energized_map, new_location, 'right')
    elsif map[new_location[0]][new_location[1]] == '/'
      step_beam(map, energized_map, new_location, 'right')
    elsif map[new_location[0]][new_location[1]] == "\\"
      step_beam(map, energized_map, new_location, 'left')
    end
  elsif direction == 'down'
    new_location = [location[0] + 1, location[1]]
    return if location[0] + 1 >= map.size
    return if energized_map[new_location[0]][new_location[1]].include? 'D'
    energized_map[new_location[0]][new_location[1]] << 'D'
    if map[new_location[0]][new_location[1]] == '.'
      step_beam(map, energized_map, new_location, 'down')
    elsif map[new_location[0]][new_location[1]] == '|'
      step_beam(map, energized_map, new_location, 'down')
    elsif map[new_location[0]][new_location[1]] == '-'
      step_beam(map, energized_map, new_location, 'left')
      step_beam(map, energized_map, new_location, 'right')
    elsif map[new_location[0]][new_location[1]] == '/'
      step_beam(map, energized_map, new_location, 'left')
    elsif map[new_location[0]][new_location[1]] == "\\"
      step_beam(map, energized_map, new_location, 'right')
    end
  end
end

def solution_one_start(map, start_location, start_direction)
  return 0 if start_location[0] < 0
  return 0 if start_location[1] < 0
  return 0 if start_location[0] >= map.size
  return 0 if start_location[1] >= map[0].size
  # puts map.map{|l| l.join('')}.join("\n")

  energized_map = []
  map.each do |line|
    energized_map_line = []
    line.each do |char|
      energized_map_line << ['X']
    end
    energized_map << energized_map_line
  end
  energized_map[start_location[0]][start_location[1]] = ['R'] if start_direction == 'right'
  energized_map[start_location[0]][start_location[1]] = ['L'] if start_direction == 'left'
  energized_map[start_location[0]][start_location[1]] = ['U'] if start_direction == 'up'
  energized_map[start_location[0]][start_location[1]] = ['D'] if start_direction == 'down'

  # puts energized_map.map{|l| l.map{|c| c.size }.join('')}.join("\n")

  step_beam(map, energized_map, start_location, start_direction)

  # puts energized_map.map{|l| l.map{|c| c.size }.join('')}.join("\n")

  count = 0
  energized_map.each do |line| 
    line.each do |space| 
      count += 1 if space != ['X']
    end
  end
  count
end

def solution(input)
  map = parse_input(input)
  # solution_one_start(map, [0,0], 'right')
  max_count = 0
  # puts solution_one_start(map, [106,96], 'up')
  (0..map.size).each do |i|
    [0, map[0].size - 1].each do |j|
      l = solution_one_start(map, [i,j], 'right')
      max_count = l if l > max_count

      r = solution_one_start(map, [i,j], 'left')
      max_count = r if r > max_count

      u = solution_one_start(map, [i,j], 'up')
      max_count = u if u > max_count

      d = solution_one_start(map, [i,j], 'down')
      max_count = d if d > max_count

      puts "finished #{i},#{j}, count #{max_count}"
    end
  end
  [0, map.size - 1].each do |i|
    (0..map.size).each do |j|
      l = solution_one_start(map, [i,j], 'right')
      max_count = l if l > max_count

      r = solution_one_start(map, [i,j], 'left')
      max_count = r if r > max_count

      u = solution_one_start(map, [i,j], 'up')
      max_count = u if u > max_count

      d = solution_one_start(map, [i,j], 'down')
      max_count = d if d > max_count

      puts "finished #{i},#{j}, count #{max_count}"
    end
  end
  max_count
end

puts solution(test_input)

# 8259 too hgih
# 8257 too hgih


# finished 106,95, count 8258
# finished 106,96, count 8259